# Generated by Django 5.2.4 on 2025-08-03 13:17

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("epd_parser", "0006_remove_pdf_file_field"),
    ]

    operations = [
        migrations.CreateModel(
            name="FlexibleServiceCharge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        help_text="Name of the utility service",
                        max_length=255,
                        verbose_name="Service Name",
                    ),
                ),
                (
                    "has_volume",
                    models.BooleanField(
                        default=False,
                        help_text="Whether volume data is present",
                        verbose_name="Has Volume",
                    ),
                ),
                (
                    "has_tariff",
                    models.BooleanField(
                        default=False,
                        help_text="Whether tariff data is present",
                        verbose_name="Has Tariff",
                    ),
                ),
                (
                    "has_recalculation",
                    models.BooleanField(
                        default=False,
                        help_text="Whether recalculation data is present",
                        verbose_name="Has Recalculation",
                    ),
                ),
                (
                    "has_debt",
                    models.BooleanField(
                        default=False,
                        help_text="Whether debt data is present",
                        verbose_name="Has Debt",
                    ),
                ),
                (
                    "has_paid",
                    models.BooleanField(
                        default=False,
                        help_text="Whether paid data is present",
                        verbose_name="Has Paid",
                    ),
                ),
                (
                    "volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Volume of service consumed",
                        max_digits=15,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0000"))
                        ],
                        verbose_name="Volume",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True,
                        help_text="Unit of measurement (кв.м., куб.м., кВт*ч, etc.)",
                        max_length=20,
                        verbose_name="Unit",
                    ),
                ),
                (
                    "tariff",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Tariff rate per unit",
                        max_digits=15,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0000"))
                        ],
                        verbose_name="Tariff",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Calculated amount for this service",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Amount",
                    ),
                ),
                (
                    "recalculation",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Recalculation amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Recalculation",
                    ),
                ),
                (
                    "debt",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Previous debt amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Debt",
                    ),
                ),
                (
                    "paid",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Amount already paid",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Paid",
                    ),
                ),
                (
                    "total",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total amount to pay",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Total",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order of service in the document",
                        verbose_name="Order",
                    ),
                ),
                (
                    "original_line",
                    models.TextField(
                        blank=True,
                        help_text="Original text line from PDF",
                        verbose_name="Original Line",
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flexible_service_charges",
                        to="epd_parser.epddocument",
                        verbose_name="EPD Document",
                    ),
                ),
            ],
            options={
                "verbose_name": "Flexible Service Charge",
                "verbose_name_plural": "Flexible Service Charges",
                "ordering": ["document", "order"],
                "indexes": [
                    models.Index(
                        fields=["document", "order"],
                        name="epd_parser__documen_7afa17_idx",
                    ),
                    models.Index(
                        fields=["service_name"], name="epd_parser__service_7c170b_idx"
                    ),
                    models.Index(
                        fields=["has_volume"], name="epd_parser__has_vol_c09bee_idx"
                    ),
                    models.Index(
                        fields=["has_tariff"], name="epd_parser__has_tar_ccb8af_idx"
                    ),
                ],
            },
        ),
    ]
