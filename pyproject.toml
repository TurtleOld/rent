[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "rent-utility-parser"
version = "0.1.0"
description = "Django project to manage and store utility payment data from ЕПД PDFs"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "django>=5.0,<5.1",
    "psycopg2-binary>=2.9.9",
    "pdfplumber>=0.10.3",
    "requests>=2.31.0",
    "python-decouple>=3.8",
    "django-crispy-forms>=2.1",
    "crispy-bootstrap5>=0.7",
    "pillow>=10.0.0",
    "pymupdf>=1.26.3",
    "pandas>=2.3.1",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.9",
    "mypy>=1.7.1",
    "flake8>=6.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "pytest>=7.4.3",
    "pytest-django>=4.7.0",
    "factory-boy>=3.3.0",
    "coverage>=7.3.2",
]

[project.scripts]
manage = "django.core.management:execute_from_command_line"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "PLR", # pylint refactor
    "PLW", # pylint warnings
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR0912", # too many branches
    "PLR0911", # too many return statements (complex parsing logic)
    "RUF001", # ambiguous-unicode-character-string
    "RUF002", # ambiguous-unicode-character-docstring
    "RUF003", # ambiguous-unicode-character-comment
    "PLC0415", # import should be at top-level (manage.py is Django standard)
    "RUF012", # mutable class attributes (Django models and migrations use these)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"migrations/*" = ["E501", "F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = false
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "django.*",
    "pdfplumber.*",
    "psycopg2.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_django = "django"
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.coverage.run]
source = ["utility_parser"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/settings/*",
    "manage.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = ["utility_parser", "epd_parser"] 

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "ruff>=0.12.7",
]
