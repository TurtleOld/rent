#!/usr/bin/env python3
"""
Отладочный скрипт для проверки единиц измерений
"""

import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from epd_parser.pdf_parse import parse_services, parse_universal_service_line
from decimal import Decimal


def debug_units():
    """Отлаживает единицы измерений"""
    print("=== Отладка единиц измерений ===")

    # Реальные данные из документа
    test_text = """
РАСЧЕТ РАЗМЕРА ПЛАТЫ ЗА ЖИЛИЩНО-КОММУНАЛЬНЫЕ И ИНЫЕ УСЛУГИ ЗА ИЮЛЬ 2025г.

Виды услуг Объем услуг Ед.изм. Тариф, руб. Начислено по тарифу, руб. Перерасчеты (доначисления+, уменьшения-) Задолженность/Переплата(-) на начало периода Оплачено, руб. ИТОГО, руб.

Начисления за жилищные услуги:

56.50 кв.м. 22.00 1 243,00 0,00 1 017,00 1 017,00 1 243,00
ВОДООТВЕДЕНИЕ ОДН 0.573778 куб. м. 61.19 35,11 82,84 87,51 87,51 117,95
ГОРЯЧАЯ ВОДА (НОСИТЕЛЬ) ОДН 0.078179 куб.м. 62.22 4,86 0,00 4,42 4,42 4,86
ГОРЯЧЕЕ В/С (ЭНЕРГИЯ) ОДН 0.078179 Гкал 2774.75 216,93 0,00 12,38 12,38 216,93
56.50 кв.м. 38.61 2 181,47 0,00 1 965,64 1 965,64 2 181,47
ХОЛОДНОЕ В/С ОДН 0.573778 куб. м. 62.22 35,70 103,61 108,67 108,67 139,31
ЭЛЕКТРОСНАБЖЕНИЕ ОДН 1.305015 кВт*ч 6.19 8,08 -1,44 4.61 4,61 6,64

Начисления за коммунальные услуги:

ГОРЯЧЕЕ В/С (ЭНЕРГИЯ) 0.03245 куб.м. 2774.75 90,04 0,00 395,96 395,96 90,04
ГОРЯЧЕЕ В/С (НОСИТЕЛЬ) 0.50 куб.м. 62.22 31,11 0,00 141,40 172,51 0,00
ОБРАЩЕНИЕ С ТКО 56.50 кв.м. 11.333975 640,37 0,00 564,20 564,20 640,37
ОТОПЛЕНИЕ 0.8249 Гкал 2774.75 2 288,89 0,00 2 013,10 2 013,10 2 288,89
ХОЛОДНОЕ В/С 4.00 куб. м. 62.22 248,88 -304,01 304,01 275,84 0,00
ВОДООТВЕДЕНИЕ 4.50 куб. м. 61.19 275,36 -281,11 411,86 408,92 0,00

Начисления за иные услуги:

ЗАПИРАЮЩЕЕ УСТРОЙСТВО 1.00 абонент 50.00 50,00 0,00 50,00 50,00 50,00
ТО ВКГО 1.00 абонент 118.83 118,83 0,00 118,83 118,83 118,83

Всего за июль 2025 без учета добровольного страхования:
"""

    services = parse_services(test_text)
    print(f"Найдено услуг: {len(services)}")

    print("\n=== Анализ единиц измерений ===")
    for i, service in enumerate(services, 1):
        service_name = service.get("service_name", "НЕИЗВЕСТНО")
        unit = service.get("unit", "")

        print(f"\nУслуга {i}: {service_name}")
        print(f"  Единица измерения: '{unit}'")
        print(f"  Длина: {len(unit)} символов")

        if len(unit) > 20:
            print(f"  ⚠️  ПРОБЛЕМА: Длина превышает 20 символов!")
        elif len(unit) == 0:
            print(f"  ℹ️  Единица измерения не найдена")
        else:
            print(f"  ✅ OK")


def test_problematic_lines():
    """Тестирует проблемные строки, которые могут содержать длинные единицы"""
    print("\n=== Тестирование проблемных строк ===")

    # Тестируем строки, которые могут содержать длинные единицы
    test_lines = [
        "56.50 кв.м. 22.00 1 243,00 0,00 1 017,00 1 017,00 1 243,00",
        "ВОДООТВЕДЕНИЕ ОДН 0.573778 куб. м. 61.19 35,11 82,84 87,51 87,51 117,95",
        "ГОРЯЧАЯ ВОДА (НОСИТЕЛЬ) ОДН 0.078179 куб.м. 62.22 4,86 0,00 4,42 4,42 4,86",
        "ЭЛЕКТРОСНАБЖЕНИЕ ОДН 1.305015 кВт*ч 6.19 8,08 -1,44 4.61 4,61 6,64",
        "ЗАПИРАЮЩЕЕ УСТРОЙСТВО 1.00 абонент 50.00 50,00 0,00 50,00 50,00 50,00",
    ]

    for i, line in enumerate(test_lines, 1):
        print(f"\nТест {i}: {line}")
        result = parse_universal_service_line(line)
        if result:
            unit = result.get("unit", "")
            if isinstance(unit, str):
                print(f"  Результат: unit='{unit}', длина={len(unit)}")
                if len(unit) > 20:
                    print(f"  ⚠️  ПРОБЛЕМА: Длина превышает 20 символов!")
            else:
                print(f"  Результат: unit={unit} (не строка)")
        else:
            print(f"  Не удалось распарсить")


def test_long_units():
    """Тестирует обработку длинных единиц измерений"""
    print("\n=== Тестирование длинных единиц измерений ===")

    # Тестируем строки с длинными единицами
    test_lines = [
        "ТЕСТОВАЯ УСЛУГА 1.00 очень_длинная_единица_измерения_которая_превышает_лимит 50.00 50,00 0,00 50,00 50,00 50,00",
        "ДРУГАЯ УСЛУГА 2.00 короткая_ед 100.00 100,00 0,00 100,00 100,00 100,00",
    ]

    for i, line in enumerate(test_lines, 1):
        print(f"\nТест {i}: {line}")
        result = parse_universal_service_line(line)
        if result:
            unit = result.get("unit", "")
            if isinstance(unit, str):
                print(f"  Результат: unit='{unit}', длина={len(unit)}")
                if len(unit) > 20:
                    print(f"  ⚠️  Длина превышает 20 символов!")
                else:
                    print(f"  ✅ OK")
            else:
                print(f"  Результат: unit={unit} (не строка)")
        else:
            print(f"  Не удалось распарсить")


if __name__ == "__main__":
    debug_units()
    test_problematic_lines()
    test_long_units()
